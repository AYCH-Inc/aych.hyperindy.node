#!groovy

library(identifier: 'sovrin@v2.1.1', retriever: modernSCM(
    github(credentialsId: 'sovbot-github', repoOwner: 'sovrin-foundation', repository: 'jenkins-shared')
))

String name = 'indy-node'
String pkgName = name
String mainModuleName = 'indy_node'

def nodeTestUbuntu = {
    try {
        echo 'Ubuntu Test: Checkout csm'
        checkout scm

        echo 'Ubuntu Test: Build docker image'
        def testEnv = dockerHelpers.build(name)

        testEnv.inside('--network host') {
            echo 'Ubuntu Test: Install dependencies'
            testHelpers.install()

            echo 'Ubuntu Test: Test'
            testHelpers.testRunner([resFile: "test-result-node.${NODE_NAME}.txt", testDir: 'indy_node'])
            //testHelpers.testJUnit(resFile: "test-result-node.${NODE_NAME}.xml")
        }
    }
    finally {
        echo 'Ubuntu Test: Cleanup'
        step([$class: 'WsCleanup'])
    }
}

def commonTestUbuntu = {
    try {
        echo 'Ubuntu Test: Checkout csm'
        checkout scm

        echo 'Ubuntu Test: Build docker image'
        def testEnv = dockerHelpers.build(name)

        testEnv.inside {
            echo 'Ubuntu Test: Install dependencies'
            testHelpers.install()

            echo 'Ubuntu Test: Test'
            testHelpers.testJUnit([resFile: "test-result-common.${NODE_NAME}.xml", testDir: 'indy_common'])
        }
    }
    finally {
        echo 'Ubuntu Test: Cleanup'
        step([$class: 'WsCleanup'])
    }
}

def buildDebUbuntu = { releaseVersion, sourcePath, packageVersion=null, missedPkgs=false ->
    def volumeName = "$name-deb-u1604"
    packageVersion = packageVersion ?: releaseVersion

    if (env.BRANCH_NAME != '' && env.BRANCH_NAME != 'master') {
        volumeName = "${volumeName}.${BRANCH_NAME}"
    }
    if (sh(script: "docker volume ls -q | grep -q '^$volumeName\$'", returnStatus: true) == 0) {
        sh "docker volume rm $volumeName"
    }

    // TODO build only missed ones
    dir('build-scripts/ubuntu-1604') {
        sh "./build-$name-docker.sh \"$sourcePath\" $releaseVersion $volumeName $packageVersion"
        if (missedPkgs == [pkgName]) {
            echo "Skip 3rd parties building"
        } else {
            sh "./build-3rd-parties-docker.sh $volumeName"
        }
    }
    return "$volumeName"
}

def systemTests = { component, releaseVersion ->
    def localLib
    nodeWrapper('ubuntu') {
        stage('Load local shared library') {
            checkout scm
            localLib = load 'ci/pipeline.groovy'
        }
    }

    localLib.systemTests {
        repoChannel = component
        pkgVersion = releaseVersion
        testSchema = [
            ['test_ledger.py'],
            ['test_vc.py'],
            ['test_consensus.py', 'TestTAASuite.py'],
            ['test_upgrade.py', 'test_roles.py', 'test_freshness.py', 'TestMultiSigSuite.py']
        ]
        testVersion = 'v0.7.0'
        testVersionByTag = true
    }
}

def options = TestAndPublishOptions
options.setPkgName(pkgName)
options.setApprovers([])


// TODO duplicates list from build scripts
options.setBuiltPkgs([
    'python3-timeout-decorator': '0.4.0',
    'python3-distro': '1.3.0',
])


options.skip([StagesEnum.IS_TESTED])
options.skip([StagesEnum.STATIC_CODE_VALIDATION])
options.skip([StagesEnum.TEST])
options.skip([StagesEnum.AUTOMERGE])
options.skip([StagesEnum.GET_RELEASE_VERSION])
options.skip([StagesEnum.PYPI_RELEASE])
options.skip([StagesEnum.PACK_RELEASE])
options.skip([StagesEnum.PACK_RELEASE_COPY])
//options.skip([StagesEnum.SYSTEM_TESTS])
options.skip([StagesEnum.GITHUB_RELEASE])
options.skip([StagesEnum.PACK_RELEASE_ST])
options.skip([StagesEnum.PACK_RELEASE_COPY_ST])
options.skip([StagesEnum.SYSTEM_TESTS_ST])
options.skip([StagesEnum.GITHUB_RELEASE_ST])
options.skip([StagesEnum.POOL_UPDATE_NOTIF])
options.skip([StagesEnum.BUILD_RESULT_NOTIF])

env.BRANCH_NAME = 'master'
options.releaseVersion = [
    full: '1.9.0.dev1010',
    release: '1.9.0',
    pre: 'dev',
    revision: '1010'
]


options.setSystemTestsCb(systemTests)
options.setPrContexts([env.INDY_GITHUB_PR_REQUIRED_CONTEXT ?: "ci/hyperledger-jenkins/pr-merge"])

testAndPublish(
    name,
    [
        ubuntu: [node: nodeTestUbuntu, common: commonTestUbuntu]
    ],
    true, options, [ubuntu: buildDebUbuntu], mainModuleName
)
